/*
	ARCAserver_businesses.m
	The implementation classes and methods for the server.businesses web service.
	Generated by SudzC.com
*/

#import "ARCAserver_businesses.h"
				
#import "Soap.h"
#import "SoapArcaParameter.h"
	
#import "ARCABusinessesGallery.h"
#import "ARCAArrayBusinesses.h"
#import "ARCAArrayCategories.h"
#import "ARCAArrayCountries.h"
#import "ARCAArrayState.h"
#import "ARCAArrayCity.h"
#import "ARCAArrayReview.h"
#import "ARCAArrayGalleryImage.h"
#import "ARCABusinessesImage.h"
#import "ARCAGalleryImage.h"
#import "ARCASettings.h"
#import "ARCAReview.h"
#import "ARCACoordinateReturn.h"
#import "ARCAUserProfile.h"
#import "ARCAStandardReturn.h"
#import "ARCABusinesses.h"
#import "ARCACategories.h"
#import "ARCAResultsInfo.h"
#import "ARCAArrayInquire.h"
#import "ARCACountry.h"
#import "ARCAMyLocationSearchOptions.h"
#import "ARCAZipLocationSearchOptions.h"
#import "ARCAState.h"
#import "ARCALocalLocationSearchOptions.h"
#import "ARCACity.h"

/* Implementation of the service */
				
@implementation ARCAserver_businesses

	- (id) init
	{
		if(self = [super init])
		{
            self.serviceUrl = @"http://www.arcamobile.com/ws/businessfinder/v2/businesses.php";
			//self.serviceUrl = @"http://arcamobile.arcasolutions.com/ws/businesses.php";
			self.namespace = @"urn:server.businesses";
			self.headers = nil;
			self.logging = NO;
		}
		return self;
	}
	
	- (id) initWithUsername: (NSString*) username andPassword: (NSString*) password {
		if(self = [super initWithUsername:username andPassword:password]) {
		}
		return self;
	}
	
	+ (ARCAserver_businesses*) service {
		return [ARCAserver_businesses serviceWithUsername:nil andPassword:nil];
	}
	
	+ (ARCAserver_businesses*) serviceWithUsername: (NSString*) username andPassword: (NSString*) password {
		return [[[ARCAserver_businesses alloc] initWithUsername:username andPassword:password] autorelease];
	}

		
	/* Returns ARCAArrayBusinesses*. Get Businesses Info */
	- (SoapRequest*) SearchBusinesses: (id <SoapDelegate>) handler typeOfSearch: (id) typeOfSearch
	{
		return [self SearchBusinesses: handler action: nil typeOfSearch: typeOfSearch];
	}

	- (SoapRequest*) SearchBusinesses: (id) _target action: (SEL) _action typeOfSearch: (id) typeOfSearch
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapArcaParameter alloc] initWithValue: typeOfSearch forName: @"typeOfSearch"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"SearchBusinesses" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"urn:server.businesses#businesses" postData: _envelope deserializeTo: [[ARCAArrayBusinesses alloc] autorelease]];
		[_request send];
		return _request;
	}

	/* Returns ARCAArrayBusinesses*. Get Businesses Info */
	- (SoapRequest*) getAllNearbyBusinesses: (id <SoapDelegate>) handler keyword: (NSString*) keyword nearbyType: (NSString*) nearbyType zipcode: (NSString*) zipcode nearbyRange: (NSDecimalNumber*) nearbyRange latitude: (float) latitude longitude: (float) longitude page: (NSDecimalNumber*) page
	{
		return [self getAllNearbyBusinesses: handler action: nil keyword: keyword nearbyType: nearbyType zipcode: zipcode nearbyRange: nearbyRange latitude: latitude longitude: longitude page: page];
	}

	- (SoapRequest*) getAllNearbyBusinesses: (id) _target action: (SEL) _action keyword: (NSString*) keyword nearbyType: (NSString*) nearbyType zipcode: (NSString*) zipcode nearbyRange: (NSDecimalNumber*) nearbyRange latitude: (float) latitude longitude: (float) longitude page: (NSDecimalNumber*) page
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: keyword forName: @"keyword"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: nearbyType forName: @"nearbyType"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: zipcode forName: @"zipcode"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: nearbyRange forName: @"nearbyRange"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: [NSNumber numberWithFloat: latitude] forName: @"latitude"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: [NSNumber numberWithFloat: longitude] forName: @"longitude"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: page forName: @"page"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"getAllNearbyBusinesses" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"urn:server.businesses#businesses" postData: _envelope deserializeTo: [[ARCAArrayBusinesses alloc] autorelease]];
		[_request send];
		return _request;
	}

	/* Returns ARCAArrayBusinesses*. Get Businesses by location */
	- (SoapRequest*) getAllNearbyLocation: (id <SoapDelegate>) handler country_id: (NSDecimalNumber*) country_id state_id: (NSDecimalNumber*) state_id city_id: (NSDecimalNumber*) city_id latitude: (float) latitude longitude: (float) longitude
	{
		return [self getAllNearbyLocation: handler action: nil country_id: country_id state_id: state_id city_id: city_id latitude: latitude longitude: longitude];
	}

	- (SoapRequest*) getAllNearbyLocation: (id) _target action: (SEL) _action country_id: (NSDecimalNumber*) country_id state_id: (NSDecimalNumber*) state_id city_id: (NSDecimalNumber*) city_id latitude: (float) latitude longitude: (float) longitude
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: country_id forName: @"country_id"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: state_id forName: @"state_id"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: city_id forName: @"city_id"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: [NSNumber numberWithFloat: latitude] forName: @"latitude"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: [NSNumber numberWithFloat: longitude] forName: @"longitude"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"getAllNearbyLocation" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"urn:server.businesses#businesses" postData: _envelope deserializeTo: [[ARCAArrayBusinesses alloc] autorelease]];
		[_request send];
		return _request;
	}

	/* Returns ARCAArrayCategories*. Get Categories Info */
	- (SoapRequest*) getAllCategories: (id <SoapDelegate>) handler
	{
		return [self getAllCategories: handler action: nil];
	}

	- (SoapRequest*) getAllCategories: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"getAllCategories" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"urn:server.businesses#businesses" postData: _envelope deserializeTo: [[ARCAArrayCategories alloc] autorelease]];
		[_request send];
		return _request;
	}

	/* Returns ARCAArrayBusinesses*. Get businesses by Category */
	- (SoapRequest*) getAllBusinessForCategory: (id <SoapDelegate>) handler category_id: (NSDecimalNumber*) category_id latitude: (float) latitude longitude: (float) longitude page: (NSDecimalNumber*) page
	{
		return [self getAllBusinessForCategory: handler action: nil category_id: category_id latitude: latitude longitude: longitude page: page];
	}

	- (SoapRequest*) getAllBusinessForCategory: (id) _target action: (SEL) _action category_id: (NSDecimalNumber*) category_id latitude: (float) latitude longitude: (float) longitude page: (NSDecimalNumber*) page
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: category_id forName: @"category_id"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: [NSNumber numberWithFloat: latitude] forName: @"latitude"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: [NSNumber numberWithFloat: longitude] forName: @"longitude"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: page forName: @"page"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"getAllBusinessForCategory" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"urn:server.businesses#businesses" postData: _envelope deserializeTo: [[ARCAArrayBusinesses alloc] autorelease]];
		[_request send];
		return _request;
	}

	/* Returns ARCAUserProfile*. Facebook signin */
	- (SoapRequest*) loginWithFacebook: (id <SoapDelegate>) handler uid: (NSString*) uid firstName: (NSString*) firstName lastName: (NSString*) lastName acessToken: (NSString*) acessToken
	{
		return [self loginWithFacebook: handler action: nil uid: uid firstName: firstName lastName: lastName acessToken: acessToken];
	}

	- (SoapRequest*) loginWithFacebook: (id) _target action: (SEL) _action uid: (NSString*) uid firstName: (NSString*) firstName lastName: (NSString*) lastName acessToken: (NSString*) acessToken
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: uid forName: @"uid"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: firstName forName: @"firstName"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: lastName forName: @"lastName"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: acessToken forName: @"acessToken"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"loginWithFacebook" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"urn:server.businesses#businesses" postData: _envelope deserializeTo: [[ARCAUserProfile alloc] autorelease]];
		[_request send];
		return _request;
	}

	/* Returns ARCAStandardReturn*. Create user profile */
	- (SoapRequest*) createNewProfile: (id <SoapDelegate>) handler loginName: (NSString*) loginName password: (NSString*) password retypedPassword: (NSString*) retypedPassword defaultLanguage: (NSString*) defaultLanguage userName: (NSString*) userName email: (NSString*) email
	{
		return [self createNewProfile: handler action: nil loginName: loginName password: password retypedPassword: retypedPassword defaultLanguage: defaultLanguage userName: userName email: email];
	}

	- (SoapRequest*) createNewProfile: (id) _target action: (SEL) _action loginName: (NSString*) loginName password: (NSString*) password retypedPassword: (NSString*) retypedPassword defaultLanguage: (NSString*) defaultLanguage userName: (NSString*) userName email: (NSString*) email
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: loginName forName: @"loginName"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: password forName: @"password"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: retypedPassword forName: @"retypedPassword"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: defaultLanguage forName: @"defaultLanguage"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: userName forName: @"userName"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: email forName: @"email"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"createNewProfile" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"urn:server.businesses#businesses" postData: _envelope deserializeTo: [[ARCAStandardReturn alloc] autorelease]];
		[_request send];
		return _request;
	}

	/* Returns ARCAStandardReturn*. Autenticate Account */
	- (SoapRequest*) loginWithProfile: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password
	{
		return [self loginWithProfile: handler action: nil username: username password: password];
	}

	- (SoapRequest*) loginWithProfile: (id) _target action: (SEL) _action username: (NSString*) username password: (NSString*) password
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: username forName: @"username"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: password forName: @"password"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"loginWithProfile" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"urn:server.businesses#businesses" postData: _envelope deserializeTo: [[ARCAStandardReturn alloc] autorelease]];
		[_request send];
		return _request;
	}

	/* Returns BOOL. Post to facebook */
	- (SoapRequest*) PostToFacebook: (id <SoapDelegate>) handler uid: (NSString*) uid acessToken: (NSString*) acessToken businessID: (NSDecimalNumber*) businessID type: (NSString*) type
	{
		return [self PostToFacebook: handler action: nil uid: uid acessToken: acessToken businessID: businessID type: type];
	}

	- (SoapRequest*) PostToFacebook: (id) _target action: (SEL) _action uid: (NSString*) uid acessToken: (NSString*) acessToken businessID: (NSDecimalNumber*) businessID type: (NSString*) type
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: uid forName: @"uid"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: acessToken forName: @"acessToken"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: businessID forName: @"businessID"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: type forName: @"type"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"PostToFacebook" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"urn:server.businesses#businesses" postData: _envelope deserializeTo: @"BOOL"];
		[_request send];
		return _request;
	}

	/* Returns ARCAArrayCountries*. Get All Countries */
	- (SoapRequest*) getAllCountries: (id <SoapDelegate>) handler
	{
		return [self getAllCountries: handler action: nil];
	}

	- (SoapRequest*) getAllCountries: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"getAllCountries" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"urn:server.businesses#businesses" postData: _envelope deserializeTo: [[ARCAArrayCountries alloc] autorelease]];
		[_request send];
		return _request;
	}

	/* Returns ARCAArrayState*. Get All States By Country */
	- (SoapRequest*) getStatesForCountry: (id <SoapDelegate>) handler countryID: (NSDecimalNumber*) countryID
	{
		return [self getStatesForCountry: handler action: nil countryID: countryID];
	}

	- (SoapRequest*) getStatesForCountry: (id) _target action: (SEL) _action countryID: (NSDecimalNumber*) countryID
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: countryID forName: @"countryID"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"getStatesForCountry" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"urn:server.businesses#businesses" postData: _envelope deserializeTo: [[ARCAArrayState alloc] autorelease]];
		[_request send];
		return _request;
	}

	/* Returns ARCAArrayCity*. Get All Cities By State */
	- (SoapRequest*) getCitiesForState: (id <SoapDelegate>) handler stateID: (NSDecimalNumber*) stateID letter: (NSString*) letter
	{
		return [self getCitiesForState: handler action: nil stateID: stateID letter: letter];
	}

	- (SoapRequest*) getCitiesForState: (id) _target action: (SEL) _action stateID: (NSDecimalNumber*) stateID letter: (NSString*) letter
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: stateID forName: @"stateID"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: letter forName: @"letter"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"getCitiesForState" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"urn:server.businesses#businesses" postData: _envelope deserializeTo: [[ARCAArrayCity alloc] autorelease]];
		[_request send];
		return _request;
	}

	/* Returns ARCAStandardReturn*. Post Review */
	- (SoapRequest*) postReview: (id <SoapDelegate>) handler module: (NSString*) module itemID: (NSDecimalNumber*) itemID username: (NSString*) username rateValue: (NSDecimalNumber*) rateValue shareInFacebook: (BOOL) shareInFacebook shareInTwitter: (BOOL) shareInTwitter twitter_oauth_token: (NSString*) twitter_oauth_token twitter_oauth_secret: (NSString*) twitter_oauth_secret shareInEmail: (NSString*) shareInEmail reviewText: (NSString*) reviewText reviewImage: (NSData*) reviewImage imagetype: (NSString*) imagetype foursquare_id: (NSString*) foursquare_id
	{
		return [self postReview: handler action: nil module: module itemID: itemID username: username rateValue: rateValue shareInFacebook: shareInFacebook shareInTwitter: shareInTwitter twitter_oauth_token: twitter_oauth_token twitter_oauth_secret: twitter_oauth_secret shareInEmail: shareInEmail reviewText: reviewText reviewImage: reviewImage imagetype: imagetype foursquare_id: foursquare_id];
	}

	- (SoapRequest*) postReview: (id) _target action: (SEL) _action module: (NSString*) module itemID: (NSDecimalNumber*) itemID username: (NSString*) username rateValue: (NSDecimalNumber*) rateValue shareInFacebook: (BOOL) shareInFacebook shareInTwitter: (BOOL) shareInTwitter twitter_oauth_token: (NSString*) twitter_oauth_token twitter_oauth_secret: (NSString*) twitter_oauth_secret shareInEmail: (NSString*) shareInEmail reviewText: (NSString*) reviewText reviewImage: (NSData*) reviewImage imagetype: (NSString*) imagetype foursquare_id: (NSString*) foursquare_id
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: module forName: @"module"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: itemID forName: @"itemID"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: username forName: @"username"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: rateValue forName: @"rateValue"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: [NSNumber numberWithBool: shareInFacebook] forName: @"shareInFacebook"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: [NSNumber numberWithBool: shareInTwitter] forName: @"shareInTwitter"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: twitter_oauth_token forName: @"twitter_oauth_token"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: twitter_oauth_secret forName: @"twitter_oauth_secret"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: shareInEmail forName: @"shareInEmail"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: reviewText forName: @"reviewText"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: reviewImage forName: @"reviewImage"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: imagetype forName: @"imagetype"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: foursquare_id forName: @"foursquare_id"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"postReview" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"urn:server.businesses#businesses" postData: _envelope deserializeTo: [[ARCAStandardReturn alloc] autorelease]];
		[_request send];
		return _request;
	}

	/* Returns ARCAArrayInquire*. Get All inquires */
	- (SoapRequest*) getInquiries: (id <SoapDelegate>) handler username: (NSString*) username
	{
		return [self getInquiries: handler action: nil username: username];
	}

	- (SoapRequest*) getInquiries: (id) _target action: (SEL) _action username: (NSString*) username
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: username forName: @"username"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"getInquiries" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"urn:server.businesses#businesses" postData: _envelope deserializeTo: [[ARCAArrayInquire alloc] autorelease]];
		[_request send];
		return _request;
	}

	/* Returns ARCAArrayReview*. Get All reviews by businesses */
	- (SoapRequest*) getReviews: (id <SoapDelegate>) handler userName: (NSString*) userName businessID: (NSDecimalNumber*) businessID foursquare_id: (NSString*) foursquare_id module: (NSString*) module page: (NSDecimalNumber*) page
	{
		return [self getReviews: handler action: nil userName: userName businessID: businessID foursquare_id: foursquare_id module: module page: page];
	}

	- (SoapRequest*) getReviews: (id) _target action: (SEL) _action userName: (NSString*) userName businessID: (NSDecimalNumber*) businessID foursquare_id: (NSString*) foursquare_id module: (NSString*) module page: (NSDecimalNumber*) page
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: userName forName: @"userName"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: businessID forName: @"businessID"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: foursquare_id forName: @"foursquare_id"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: module forName: @"module"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: page forName: @"page"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"getReviews" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"urn:server.businesses#businesses" postData: _envelope deserializeTo: [[ARCAArrayReview alloc] autorelease]];
		[_request send];
		return _request;
	}

	/* Returns BOOL. Register uid installation */
	- (SoapRequest*) deleteReview: (id <SoapDelegate>) handler review_id: (NSDecimalNumber*) review_id
	{
		return [self deleteReview: handler action: nil review_id: review_id];
	}

	- (SoapRequest*) deleteReview: (id) _target action: (SEL) _action review_id: (NSDecimalNumber*) review_id
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: review_id forName: @"review_id"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"deleteReview" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"urn:server.businesses#businesses" postData: _envelope deserializeTo: @"BOOL"];
		[_request send];
		return _request;
	}

	/* Returns BOOL. Post to Twitter  */
	- (SoapRequest*) PostToTwitter: (id <SoapDelegate>) handler objID: (NSDecimalNumber*) objID type: (NSString*) type oauth_token: (NSString*) oauth_token oauth_token_secret: (NSString*) oauth_token_secret
	{
		return [self PostToTwitter: handler action: nil objID: objID type: type oauth_token: oauth_token oauth_token_secret: oauth_token_secret];
	}

	- (SoapRequest*) PostToTwitter: (id) _target action: (SEL) _action objID: (NSDecimalNumber*) objID type: (NSString*) type oauth_token: (NSString*) oauth_token oauth_token_secret: (NSString*) oauth_token_secret
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: objID forName: @"objID"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: type forName: @"type"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: oauth_token forName: @"oauth_token"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: oauth_token_secret forName: @"oauth_token_secret"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"PostToTwitter" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"urn:server.businesses#businesses" postData: _envelope deserializeTo: @"BOOL"];
		[_request send];
		return _request;
	}

	/* Returns ARCAArrayBusinesses*. Get Businesses by keyword */
	- (SoapRequest*) getAllBusinessForKeyword: (id <SoapDelegate>) handler keyword: (NSString*) keyword orderBy: (NSDecimalNumber*) orderBy categoryID: (NSDecimalNumber*) categoryID latitude: (float) latitude longitude: (float) longitude distanceUnit: (NSString*) distanceUnit page: (NSDecimalNumber*) page nearbyType: (NSString*) nearbyType zipcode: (NSString*) zipcode
	{
		return [self getAllBusinessForKeyword: handler action: nil keyword: keyword orderBy: orderBy categoryID: categoryID latitude: latitude longitude: longitude distanceUnit: distanceUnit page: page nearbyType: nearbyType zipcode: zipcode];
	}

	- (SoapRequest*) getAllBusinessForKeyword: (id) _target action: (SEL) _action keyword: (NSString*) keyword orderBy: (NSDecimalNumber*) orderBy categoryID: (NSDecimalNumber*) categoryID latitude: (float) latitude longitude: (float) longitude distanceUnit: (NSString*) distanceUnit page: (NSDecimalNumber*) page nearbyType: (NSString*) nearbyType zipcode: (NSString*) zipcode
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: keyword forName: @"keyword"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: orderBy forName: @"orderBy"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: categoryID forName: @"categoryID"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: [NSNumber numberWithFloat: latitude] forName: @"latitude"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: [NSNumber numberWithFloat: longitude] forName: @"longitude"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: distanceUnit forName: @"distanceUnit"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: page forName: @"page"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: nearbyType forName: @"nearbyType"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: zipcode forName: @"zipcode"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"getAllBusinessForKeyword" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"urn:server.businesses#businesses" postData: _envelope deserializeTo: [[ARCAArrayBusinesses alloc] autorelease]];
		[_request send];
		return _request;
	}

	/* Returns ARCAArrayBusinesses*. Get Businesses by keyword */
	- (SoapRequest*) getAllBusinessForID: (id <SoapDelegate>) handler business_id: (NSDecimalNumber*) business_id latitude: (float) latitude longitude: (float) longitude foursquare_id: (NSString*) foursquare_id
	{
		return [self getAllBusinessForID: handler action: nil business_id: business_id latitude: latitude longitude: longitude foursquare_id: foursquare_id];
	}

	- (SoapRequest*) getAllBusinessForID: (id) _target action: (SEL) _action business_id: (NSDecimalNumber*) business_id latitude: (float) latitude longitude: (float) longitude foursquare_id: (NSString*) foursquare_id
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: business_id forName: @"business_id"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: [NSNumber numberWithFloat: latitude] forName: @"latitude"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: [NSNumber numberWithFloat: longitude] forName: @"longitude"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: foursquare_id forName: @"foursquare_id"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"getAllBusinessForID" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"urn:server.businesses#businesses" postData: _envelope deserializeTo: [[ARCAArrayBusinesses alloc] autorelease]];
		[_request send];
		return _request;
	}

	/* Returns ARCASettings*. Settings  */
	- (SoapRequest*) loadSettings: (id <SoapDelegate>) handler
	{
		return [self loadSettings: handler action: nil];
	}

	- (SoapRequest*) loadSettings: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"loadSettings" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"urn:server.deal#businesses" postData: _envelope deserializeTo: [[ARCASettings alloc] autorelease]];
		[_request send];
		return _request;
	}

	/* Returns ARCACoordinateReturn*. Coordinates lat,long format */
	- (SoapRequest*) getNearbyCoordinates: (id <SoapDelegate>) handler nearbyType: (NSString*) nearbyType zipcode: (NSString*) zipcode latitude: (float) latitude longitude: (float) longitude
	{
		return [self getNearbyCoordinates: handler action: nil nearbyType: nearbyType zipcode: zipcode latitude: latitude longitude: longitude];
	}

	- (SoapRequest*) getNearbyCoordinates: (id) _target action: (SEL) _action nearbyType: (NSString*) nearbyType zipcode: (NSString*) zipcode latitude: (float) latitude longitude: (float) longitude
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: nearbyType forName: @"nearbyType"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: zipcode forName: @"zipcode"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: [NSNumber numberWithFloat: latitude] forName: @"latitude"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: [NSNumber numberWithFloat: longitude] forName: @"longitude"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"getNearbyCoordinates" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"urn:server.deal#businesses" postData: _envelope deserializeTo: [[ARCACoordinateReturn alloc] autorelease]];
		[_request send];
		return _request;
	}

	/* Returns BOOL. Added to favorites  */
	- (SoapRequest*) addToStatistic: (id <SoapDelegate>) handler businesses_id: (NSDecimalNumber*) businesses_id item: (NSString*) item
	{
		return [self addToStatistic: handler action: nil businesses_id: businesses_id item: item];
	}

	- (SoapRequest*) addToStatistic: (id) _target action: (SEL) _action businesses_id: (NSDecimalNumber*) businesses_id item: (NSString*) item
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: businesses_id forName: @"businesses_id"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: item forName: @"item"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"addToStatistic" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"urn:server.businesses#businesses" postData: _envelope deserializeTo: @"BOOL"];
		[_request send];
		return _request;
	}

	/* Returns BOOL. Register uid installation */
	- (SoapRequest*) recordInstall: (id <SoapDelegate>) handler uid: (NSString*) uid device: (NSString*) device module: (NSString*) module
	{
		return [self recordInstall: handler action: nil uid: uid device: device module: module];
	}

	- (SoapRequest*) recordInstall: (id) _target action: (SEL) _action uid: (NSString*) uid device: (NSString*) device module: (NSString*) module
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: uid forName: @"uid"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: device forName: @"device"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: module forName: @"module"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"recordInstall" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"urn:server.businesses#businesses" postData: _envelope deserializeTo: @"BOOL"];
		[_request send];
		return _request;
	}

	/* Returns ARCAStandardReturn*. Register uid installation */
	- (SoapRequest*) Twilio_makeCall: (id <SoapDelegate>) handler myDeviceNumber: (NSString*) myDeviceNumber business_id: (NSDecimalNumber*) business_id
	{
		return [self Twilio_makeCall: handler action: nil myDeviceNumber: myDeviceNumber business_id: business_id];
	}

	- (SoapRequest*) Twilio_makeCall: (id) _target action: (SEL) _action myDeviceNumber: (NSString*) myDeviceNumber business_id: (NSDecimalNumber*) business_id
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: myDeviceNumber forName: @"myDeviceNumber"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: business_id forName: @"business_id"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"Twilio_makeCall" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"urn:server.businesses#businesses" postData: _envelope deserializeTo: [[ARCAStandardReturn alloc] autorelease]];
		[_request send];
		return _request;
	}

	/* Returns BOOL. Register  uid for push */
	- (SoapRequest*) pushiPhone: (id <SoapDelegate>) handler id: (NSString*) _id token: (NSString*) token notifications: (NSString*) notifications categs: (NSString*) categs module: (NSString*) module
	{
		return [self pushiPhone: handler action: nil id: _id token: token notifications: notifications categs: categs module: module];
	}

	- (SoapRequest*) pushiPhone: (id) _target action: (SEL) _action id: (NSString*) _id token: (NSString*) token notifications: (NSString*) notifications categs: (NSString*) categs module: (NSString*) module
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: _id forName: @"id"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: token forName: @"token"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: notifications forName: @"notifications"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: categs forName: @"categs"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: module forName: @"module"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"pushiPhone" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"urn:server.businesses#businesses" postData: _envelope deserializeTo: @"BOOL"];
		[_request send];
		return _request;
	}

	/* Returns BOOL. Register  uid for push all enabled */
	- (SoapRequest*) pushiPhoneEnableAll: (id <SoapDelegate>) handler id: (NSString*) _id token: (NSString*) token module: (NSString*) module
	{
		return [self pushiPhoneEnableAll: handler action: nil id: _id token: token module: module];
	}

	- (SoapRequest*) pushiPhoneEnableAll: (id) _target action: (SEL) _action id: (NSString*) _id token: (NSString*) token module: (NSString*) module
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: _id forName: @"id"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: token forName: @"token"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: module forName: @"module"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"pushiPhoneEnableAll" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"urn:server.businesses#businesses" postData: _envelope deserializeTo: @"BOOL"];
		[_request send];
		return _request;
	}

	/* Returns BOOL. Register  uid for push */
	- (SoapRequest*) pushAndroid: (id <SoapDelegate>) handler uid: (NSString*) uid token: (float) token notifications: (BOOL) notifications categories: (NSString*) categories module: (NSString*) module
	{
		return [self pushAndroid: handler action: nil uid: uid token: token notifications: notifications categories: categories module: module];
	}

	- (SoapRequest*) pushAndroid: (id) _target action: (SEL) _action uid: (NSString*) uid token: (float) token notifications: (BOOL) notifications categories: (NSString*) categories module: (NSString*) module
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: uid forName: @"uid"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: [NSNumber numberWithFloat: token] forName: @"token"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: [NSNumber numberWithBool: notifications] forName: @"notifications"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: categories forName: @"categories"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: module forName: @"module"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"pushAndroid" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"urn:server.businesses#businesses" postData: _envelope deserializeTo: @"BOOL"];
		[_request send];
		return _request;
	}

	/* Returns NSString*. Register  uid for push */
	- (SoapRequest*) CheckAndroidPush: (id <SoapDelegate>) handler uid: (NSString*) uid
	{
		return [self CheckAndroidPush: handler action: nil uid: uid];
	}

	- (SoapRequest*) CheckAndroidPush: (id) _target action: (SEL) _action uid: (NSString*) uid
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: uid forName: @"uid"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"CheckAndroidPush" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"urn:server.businesses#businesses" postData: _envelope deserializeTo: @"NSString"];
		[_request send];
		return _request;
	}

	/* Returns ARCAStandardReturn*. Forgot Password */
	- (SoapRequest*) forgotPassword: (id <SoapDelegate>) handler email: (NSString*) email
	{
		return [self forgotPassword: handler action: nil email: email];
	}

	- (SoapRequest*) forgotPassword: (id) _target action: (SEL) _action email: (NSString*) email
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: email forName: @"email"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"forgotPassword" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"urn:server.businesses#businesses" postData: _envelope deserializeTo: [[ARCAStandardReturn alloc] autorelease]];
		[_request send];
		return _request;
	}


@end
	
